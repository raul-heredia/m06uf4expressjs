#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('m06uf4expressjs:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
* Websockets
*/
const { Server } = require("socket.io");
const { set } = require('../app');
const io = new Server(server);

var partidas2Jug = require('../data/Partida2JugService');
var partidas4Jug = require('../data/Partida4JugService');
var monk = require('monk');
var db = monk('127.0.0.1:27017/projecteExpress');


function comprobarLados(partida, casillaClick, jugador) {
  let arrCasilla = casillaClick.split("-");
  arrCasilla[0] = parseInt(arrCasilla[0])
  arrCasilla[1] = parseInt(arrCasilla[1])
  // Comprobar Izquierda
  if (partida.taulell.get(`${(arrCasilla[0])}-${(arrCasilla[1] - 1)}`) == jugador) {
    if (!partida.taulell.get(casillaClick)) {
      partida.taulell.set(casillaClick, jugador)
      return true
    }
  }
  // comprobar Derecha
  else if (partida.taulell.get(`${arrCasilla[0]}-${arrCasilla[1] + 1}`) == jugador) {
    if (!partida.taulell.get(casillaClick)) {
      partida.taulell.set(casillaClick, jugador)
      return true
    }
  }
  // comprobar Abajo
  else if (partida.taulell.get(`${arrCasilla[0] + 1}-${arrCasilla[1]}`) == jugador) {
    if (!partida.taulell.get(casillaClick)) {
      partida.taulell.set(casillaClick, jugador)
      return true
    }
  }
  // comprobar Arriba
  else if (partida.taulell.get(`${arrCasilla[0] - 1}-${arrCasilla[1]}`) == jugador) {
    if (!partida.taulell.get(casillaClick)) {
      partida.taulell.set(casillaClick, jugador)
      return true
    }
  }
  // comprobar Diagonal Arriba Derecha
  else if (partida.taulell.get(`${arrCasilla[0] + 1}-${arrCasilla[1] - 1}`) == jugador) {
    if (!partida.taulell.get(casillaClick)) {
      partida.taulell.set(casillaClick, jugador)
      return true
    }
  }
  // comprobar Diagonal Abajo Derecha
  else if (partida.taulell.get(`${arrCasilla[0] - 1}-${arrCasilla[1] - 1}`) == jugador) {
    if (!partida.taulell.get(casillaClick)) {
      partida.taulell.set(casillaClick, jugador)
      return true
    }
  }
  // comprobar Diagonal Arriba Izquierda
  else if (partida.taulell.get(`${arrCasilla[0] + 1}-${arrCasilla[1] + 1}`) == jugador) {
    if (!partida.taulell.get(casillaClick)) {
      partida.taulell.set(casillaClick, jugador)
      return true
    }
  }
  // comprobar Diagonal Abajo Izquierda
  else if (partida.taulell.get(`${arrCasilla[0] - 1}-${arrCasilla[1] + 1}`) == jugador) {
    if (!partida.taulell.get(casillaClick)) {
      partida.taulell.set(casillaClick, jugador)
      return true
    }
  }
}

io.on('connection', (socket) => {
  console.log("USUARIO CONECTADO");
  socket.on('celda2Jug', function (data) {
    let partida = partidas2Jug.find(p => p.codiPartida == data.numeroPartida);
    if (!partida) return;
    let casillaClick = data.celdaClickada;
    let jugador = data.jugador;
    let colorJugador;

    // Definimos el color del jugador que ha hecho click
    partida.jugadors.forEach(j => {
      if (j.nomJugador == jugador) colorJugador = j.color;
    });
    // Si no hay dos jugadores no deja clicar
    if (partida.jugadors.length < 2) {
      console.log("Falten jugadors a la sala")
      return
    }
    console.log("Partida ->", partida.codiPartida, "| Jugador Clicat ->", jugador, "| Casella Clicada ->", casillaClick)
    // Comprobamos los lados, en caso de que alguna comprobación sea correcta y devuelva true entra en el if
    if (comprobarLados(partida, casillaClick, jugador)) {
      // Declaramos partida acabada en true 
      let isPartidaAcabada = true;
      // Iteramos todas las casillas
      partida.taulell.forEach(casella => {
        // En caso de que alguna sea falsa, quiere decir que está vacía por lo que la partida no ha acabado
        if (!casella) {
          isPartidaAcabada = false;
        }
      })
      // Si la partida ha acabado
      if (isPartidaAcabada) {
        // Por cada casilla iterar array jugadores si coincide sumar
        partida.taulell.forEach(casella => {
          // Si el valor de casilla -> rahema y el nombre del jugador -> rahema suma 150 puntos a la puntuación
          partida.jugadors.forEach(j => {
            if (j.nomJugador == casella) {
              j.puntuacio += 150;
            }
          })
        })
        // Una vez tenemos la puntuación volvemos a iterar
        partida.jugadors.forEach(j => {
          // Por cada jugador pillar el Top Record, si el resultado actual es mayor al almacenado, entonces guardarlo
          async function emmagatzemar2Jug() {
            let jugadorMongo = await db.collection('jugadors').findOne({ usuari: j.nomJugador })
            if (jugadorMongo) {
              // Si la puntuacion es mayor a la almacenada
              if (j.puntuacio > jugadorMongo.topPuntuacio1v1) {
                console.log("Nou record", j.nomJugador);
                j.nouRecord = true; // Seteamos nouRecord en true para mostrarlo en el front
                // Seteamos la nueva puntuacion
                db.collection('jugadors').update({ "usuari": j.nomJugador }, {
                  $set: {
                    "topPuntuacio1v1": j.puntuacio
                  }
                });
              }
            }
            // Emitimos la partida acabada
            socket.emit('partidaAcabada2Jug', { codiPartida: data.numeroPartida, jugadors: partida.jugadors });
            socket.broadcast.emit('partidaAcabada2Jug', { codiPartida: data.numeroPartida, jugadors: partida.jugadors });
          }
          emmagatzemar2Jug();
        })
      }
      // Si la partida no ha acabado mandamos los datos de la celda clicada junto con el numero de partida y el color del jugador
      // Ademas en caso de ser la ultima casilla disponible se manda tambien para que se actualice a todo el mundo
      console.log("Partida acabada? -> ", isPartidaAcabada)
      socket.emit('celdaMoviment2Jug', { codiPartida: data.numeroPartida, celda: data.celdaClickada, color: colorJugador });
      socket.broadcast.emit('celdaMoviment2Jug', { codiPartida: data.numeroPartida, celda: data.celdaClickada, color: colorJugador });
    }
  });
  socket.on('celda4Jug', function (data) {
    let partida = partidas4Jug.find(p => p.codiPartida == data.numeroPartida);
    if (!partida) return;
    let casillaClick = data.celdaClickada;
    let jugador = data.jugador;
    let colorJugador;
    // Iteramos el array de jugadores para definir el color que tiene el jugador que ha clicado esta vez
    partida.jugadors.forEach(j => {
      if (j.nomJugador == jugador) colorJugador = j.color;
    });
    // Si no hay 4 jugadores no deja clicar
    if (partida.jugadors.length < 4) {
      console.log("Falten jugadors a la sala")
      return
    }
    console.log("Partida ->", partida.codiPartida, "| Jugador Clicat ->", jugador, "| Casella Clicada ->", casillaClick)
    // Si el clic es correcto
    if (comprobarLados(partida, casillaClick, jugador)) {
      // Declaramos isPartidaAcabada en true
      let isPartidaAcabada = true;
      // En caso de que una casilla esté vacia quiere decir que no ha acabado la partida
      partida.taulell.forEach(casella => {
        if (!casella) {
          isPartidaAcabada = false;
        }
      })
      console.log("Partida acabada? -> ", isPartidaAcabada)
      // Si la partida ha acabado
      if (isPartidaAcabada) {
        // Por cada casilla iterar array jugadores si coincide sumar
        // si casilla -> rahema y jugador.nomJugador -> rahema puntuacion += 250
        partida.taulell.forEach(casella => {
          partida.jugadors.forEach(j => {
            if (j.nomJugador == casella) {
              j.puntuacio += 250;
            }
          })
        })
        // Una vez tenemos las puntuaciones, volvemos a iterar para comparar con el record almacenado
        partida.jugadors.forEach(j => {
          // Por cada jugador pillar el Top Record, si el resultado actual es mayor al almacenado, entonces guardarlo
          async function emmagatzemar2Jug() {
            let jugadorMongo = await db.collection('jugadors').findOne({ usuari: j.nomJugador })
            if (jugadorMongo) {
              // si la puntuacion de esta partida es mayor a la almacenada se modifica
              if (j.puntuacio > jugadorMongo.topPuntuacio4v4) {
                console.log("Nou record", j.nomJugador);
                j.nouRecord = true; // Ponemos nouRecord en true para mostrarlo en el front
                // Modificamos el registro
                db.collection('jugadors').update({ "usuari": j.nomJugador }, {
                  $set: {
                    "topPuntuacio4v4": j.puntuacio
                  }
                });
              }
            }
            // Emitimos que la partida ha acabado
            socket.emit('partidaAcabada4Jug', { codiPartida: data.numeroPartida, jugadors: partida.jugadors });
            socket.broadcast.emit('partidaAcabada4Jug', { codiPartida: data.numeroPartida, jugadors: partida.jugadors });
          }
          emmagatzemar2Jug();
        })
      }
      // Si la partida no ha acabado mandamos la casilla junto con el codigo de la partida y el color
      // Ademas en caso de ser la ultima casilla disponible se manda tambien para que se actualice a todo el mundo
      socket.emit('celdaMoviment4Jug', { codiPartida: data.numeroPartida, celda: data.celdaClickada, color: colorJugador });
      socket.broadcast.emit('celdaMoviment4Jug', { codiPartida: data.numeroPartida, celda: data.celdaClickada, color: colorJugador });
    }
  });
  //broadcast --> cualquiera que este conectado envia el cambio para que lo vean los demas
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
