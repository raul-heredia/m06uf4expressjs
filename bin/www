#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('m06uf4expressjs:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
* Websockets
*/
const { Server } = require("socket.io");
const { set } = require('../app');
const io = new Server(server);

var partidas2Jug = require('../data/Partida2JugService');
var partidas4Jug = require('../data/Partida4JugService');

io.on('connection', (socket) => {
  console.log("USUARIO CONECTADO");
  socket.on('celda2Jug', function (data) {
    /*
      - Una vez importado los arrays de partidas

      - Buscar la partida con el identificador que le llega del websocket (Se podria hacer una nueva variable partida para que sea mas facil )
      - Una vez encontrada la partida.
        - Opción 1 Partida 2 Jugadores: Pillar posicion 0 y 3 (En la de 4 no se podria porque hay numeros de dos cifras) del string celdaClickada, parsearlos como integros y hacer funciones que comprueben hacia todos los lados y devuelvan true o falses
        - Opción 2 (Cualquier partida): Hacer un split split("-") el cual nos devuelve un array con los numeros tal cual y sin guion, se parsean como integros y hacer funciones que comprueben hacia todos los lados y devuelvan true o falses
    
    
    */

    function comprobarLados(partida, casillaClick, jugador) {
      let arrCasilla = casillaClick.split("-");
      arrCasilla[0] = parseInt(arrCasilla[0])
      arrCasilla[1] = parseInt(arrCasilla[1])
      console.log(arrCasilla)
      // Comprobar Izquierda
      if (partida.taulell.get(`${(arrCasilla[0])}-${(arrCasilla[1] - 1)}`) == jugador) {
        partida.taulell.set(casillaClick, jugador)
        return true
      }
      // comprobar Derecha
      else if (partida.taulell.get(`${arrCasilla[0]}-${arrCasilla[1] + 1}`) == jugador) {
        partida.taulell.set(casillaClick, jugador)
        return true
      }
      // comprobar Abajo
      else if (partida.taulell.get(`${arrCasilla[0] + 1}-${arrCasilla[1]}`) == jugador) {
        partida.taulell.set(casillaClick, jugador)
        return true
      }
      // comprobar Arriba
      else if (partida.taulell.get(`${arrCasilla[0] - 1}-${arrCasilla[1]}`) == jugador) {
        partida.taulell.set(casillaClick, jugador)
        return true
      }
      // comprobar Diagonal Arriba Derecha
      else if (partida.taulell.get(`${arrCasilla[0] + 1}-${arrCasilla[1] - 1}`) == jugador) {
        partida.taulell.set(casillaClick, jugador)
        return true
      }
      // comprobar Diagonal Abajo Derecha
      else if (partida.taulell.get(`${arrCasilla[0] - 1}-${arrCasilla[1] - 1}`) == jugador) {
        partida.taulell.set(casillaClick, jugador)
        return true
      }
      // comprobar Diagonal Arriba Izquierda
      else if (partida.taulell.get(`${arrCasilla[0] + 1}-${arrCasilla[1] + 1}`) == jugador) {
        partida.taulell.set(casillaClick, jugador)
        return true
      }
      // comprobar Diagonal Abajo Izquierda
      else if (partida.taulell.get(`${arrCasilla[0] - 1}-${arrCasilla[1] + 1}`) == jugador) {
        partida.taulell.set(casillaClick, jugador)
        return true
      }
    }

    let partida = partidas2Jug.find(p => p.codiPartida == data.numeroPartida);
    if (!partida) return;
    let casillaClick = data.celdaClickada;
    let jugador = data.jugador;
    let colorJugador;
    console.log(partida)
    partida.jugadors.forEach(j => {
      if (j.nomJugador == jugador) colorJugador = j.color;
    });
    // console.log(partida, casillaClick, jugador)

    if (comprobarLados(partida, casillaClick, jugador)) {
      socket.emit('celdaMoviment2Jug', { codiPartida: data.numeroPartida, celda: data.celdaClickada, color: colorJugador });
      socket.broadcast.emit('celdaMoviment2Jug', { codiPartida: data.numeroPartida, celda: data.celdaClickada, color: colorJugador });
    }
  });
  //broadcast --> cualquiera que este conectado envia el cambio para que lo vean los demas
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
